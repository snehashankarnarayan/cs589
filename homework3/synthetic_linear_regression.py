#__author__ = 'snehas'

from pyspark import SparkContext, SparkConf
import os
import numpy as np
import types
import math
import sys
from time import time
from pprint import pprint

#Spark Context
conf = SparkConf().setAppName("app").setMaster("local[*]")
sc = SparkContext(conf=conf)

#This function computes the feature matrix from each record in rdd
def getFeatureMatrix(x_array):
    x = x_array[2]
    xt = x.T
    prod = np.outer(x,xt)
    return prod

#This function computes the feature target product from each record in rdd
def getFeatureTargetProduct(x_array):
    x = x_array[2]
    y = x_array[3]
    prod = np.multiply(x, y)
    return prod

#This is a recursive function which takes the nested tuples generated by join and spits out a list
def get_val_list(values):
    val_list = list()
    if(values[0] is not None):
        if(isinstance(values[0], types.ListType)):
            val_list.append(values[0])
        elif(isinstance(values[0], types.TupleType)):
            val_list = val_list + get_val_list(values[0])
    if(values[1] is not None):
        if(isinstance(values[1], types.ListType)):
            val_list.append(values[1])
        elif(isinstance(values[1], types.TupleType)):
            val_list = val_list + get_val_list(values[1])
    return val_list

#This function takes in the output created by multiple joins and puts in the output format required which is
#(projcode, pagename, [1 , .... <feature vector>], target
def getNumpyArray(s):
    arr = np.zeros(18)
    target = 0.0
    arr[0] = 1
    keys = s[0]
    values = s[1]
    val_list = get_val_list(values)
    for hour in val_list:
        if(int(hour[0]) == 23):
            target = int(hour[1])
        else:
            arr[int(hour[0]) - 5] = int(hour[1])
    return (keys[0], keys[1], arr, target);

#Main code: Given the directory name of the data
def run_linear_regression(dirName):
    joined_rrd = sc.textFile(dirName + "6.txt")

    #Augment the hour data
    joined_rrd = joined_rrd.map(lambda x: ((x.split()[0], x.split()[1]), ["6", x.split()[2]]))
    for i in range(7, 24):
        filename = str(dirName)+ str(i) + ".txt"
        rrd = sc.textFile(filename)
        #Augment the hour data
        rrd = rrd.map(lambda x: ((x.split()[0], x.split()[1]), [str(i), x.split()[2]]))

        #Do an outer join
        joined_rrd = joined_rrd.fullOuterJoin(rrd)

    np.set_printoptions(suppress=True)
    #Map to the format required
    final_rrd = joined_rrd.map(getNumpyArray)
    mult = final_rrd.map(getFeatureMatrix)
    feature_matrix = mult.reduce(lambda a,b:np.add(a,b))
    pprint(feature_matrix)

    #Get the xy product and sum up
    mult = final_rrd.map(getFeatureTargetProduct)
    xy_prod = mult.reduce(lambda a,b: np.add(a,b))
    pprint(xy_prod)

    #Obtain the weights for linear regression
    f_inv = np.linalg.inv(feature_matrix)
    weights = np.dot(f_inv, xy_prod)
    pprint(weights)


    #Filter the en-data
    en_train = final_rrd.filter(lambda s: (s[0] == 'en' and len(s[1])%2 ==0 ))
    en_test = final_rrd.filter(lambda s: (s[0] == 'en' and len(s[1])%2 !=0 ))

    #Get the feature matrix and sum up
    mult = en_train.map(getFeatureMatrix)
    feature_matrix = mult.reduce(lambda a,b:np.add(a,b))

    #Get the xy product and sum up
    mult = en_train.map(getFeatureTargetProduct)
    xy_prod = mult.reduce(lambda a,b: np.add(a,b))

    #Obtain the weights for linear regression
    f_inv = np.linalg.inv(feature_matrix)
    weights = np.dot(f_inv, xy_prod)

    #Compute the predicted values for the test set
    predicted_values = en_test.map(lambda s: (s[1], np.dot(weights.T, s[2]), s[3]))

    #Filter out the yahoo-data
    yahoo_predicted = predicted_values.filter(lambda s: s[0] == 'yahoo')
    yahoo_predicted.first()

    #Compute RMSE
    count = predicted_values.count()
    rmse_square = predicted_values.map(lambda s: (s[1] - s[2])*(s[1]-s[2]))
    rmse_square = rmse_square.reduce(lambda a,b:a+b)
    rmse_square = rmse_square/count
    rmse_square = math.sqrt(rmse_square)
    print "RMSE: " + str(rmse_square)

if __name__ == "__main__":
    t1 = time()
    dirName = sys.argv[1]
    run_linear_regression(dirName)
    t2 = time()
    print 'Time taken in seconds: %f' % (t2 - t1)